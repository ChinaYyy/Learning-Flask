= 程序的基本结构

== 初始化
----
from flask import Flask
app = Flask(__name)
----
TIP: 参数为主模块或包的名字，决定主程序的根目录

== 路由和视图函数

[source,python]
----
@app.route('/')
def index():
    return '<h1>Hello World!</h1>'
----

将 index() 注册为根地址的处理程序，称为 **视图函数**.

[source,python]
----
@app.route('/user/<name>')
def user(name):  
    return '<h1>Hello, %s!</h1>' % name 
----

路由函数参数可包含动态部分

== 请求--响应循环

=== 程序和请求上下文


让视图函数访问请求对象，如果将其作为参数传入视图函数，会导致每个视图函数都增加一个参数。
除了访问请求对象，如果视图函数还要访问其他对象，情况会更糟。

为避免大量可有可无的参数把视图函数弄的一团糟，Flask使用`上下文`临时把某些对象变为全局可访问。

事实上，request不可甬全局变量。多个线程同时处理不同客户端发送的不同请求时，每个线程看到的reques请求对象必然不同。Flask使用上下文让特定的变量在一个线程中全局可访问与此同时不会干扰其他线程。


.Flask上下文全局变量
[width="85%",cols="<1,<1,<4"options="header"]
|===========================
|变量名|上下文|说明
|current_app|程序上下文|当前激活程序的程序实例
|g|程序上下文|处理请求时用作临时储存的对象。每次请求都会重设这个变量
|request|请求上下文|请求对象，封装了客户端发出的HTTP请求中的内容
|session|请求上下文|用户会话，用于存储请求之间需要记住的key-value
|===========================

程序上下文被推送后才可以使用程序上下文。
`app.app_context()`可获得一个程序上下文。

=== 请求调度

- URL映射：flask使用`app.route`修饰器或者非修饰器形式的`app.add_url_rule()`生成映射。
- 查看映射：`app.url_map`

=== 请求钩子
- before_first_request：注册一个函数，在第一个请求前运行
- before_request：每次请求前运行
- after_request：每次请求后运行
- teardown_request：即使用异常报出，每次请求后都运行

钩子和视图函数之前的共享数据一般使用上下文全局变量`g`。

=== 响应

1. 可返回（响应文本、状态码、header字典）构成的元组

    [source,python]
    --------------------------------
    @app.route('/')
    def index():
        return '<h1>hello,world</h1>',400
    --------------------------------

2. 可返回response对象：`make_response()`可接受1个、2个、3个参数，并返回一个Response对象，可以进一步设置响应。

    [source,python]
    --------------------------------
    @app.route('/')
    def index():
        response = make_response('<h1>hello,world</h1>')
        response.set_cookie('answer','42')
        return response
    --------------------------------

3. 重定向

    [source,python]
    ===============================
    from flask import redirect
    @app.route('/')
    def index():
        return redirect('/login')
    ===============================

4. abert响应: abert用于处理错误，不会把控制权交还给调用它的函数，而是交给Web服务器。

    [source,python]
    --------------------------------
    from flask import redirect
    @app.route('/user/<id>')
    def index(id):
    user = load_user(id)
    if not user:
        abert(404)
    --------------------------------












